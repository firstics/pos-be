// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// ExampleUsecase is an autogenerated mock type for the ExampleUsecase type
type ExampleUsecase struct {
	mock.Mock
}

type ExampleUsecase_Expecter struct {
	mock *mock.Mock
}

func (_m *ExampleUsecase) EXPECT() *ExampleUsecase_Expecter {
	return &ExampleUsecase_Expecter{mock: &_m.Mock}
}

// GetText provides a mock function with given fields: text
func (_m *ExampleUsecase) GetText(text string) (string, error) {
	ret := _m.Called(text)

	if len(ret) == 0 {
		panic("no return value specified for GetText")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(text)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(text)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(text)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExampleUsecase_GetText_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetText'
type ExampleUsecase_GetText_Call struct {
	*mock.Call
}

// GetText is a helper method to define mock.On call
//   - text string
func (_e *ExampleUsecase_Expecter) GetText(text interface{}) *ExampleUsecase_GetText_Call {
	return &ExampleUsecase_GetText_Call{Call: _e.mock.On("GetText", text)}
}

func (_c *ExampleUsecase_GetText_Call) Run(run func(text string)) *ExampleUsecase_GetText_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ExampleUsecase_GetText_Call) Return(_a0 string, _a1 error) *ExampleUsecase_GetText_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ExampleUsecase_GetText_Call) RunAndReturn(run func(string) (string, error)) *ExampleUsecase_GetText_Call {
	_c.Call.Return(run)
	return _c
}

// NewExampleUsecase creates a new instance of ExampleUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewExampleUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *ExampleUsecase {
	mock := &ExampleUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
